<!DOCTYPE html>
<html>
  <head>
    
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/kube.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <header class="main_h sticky blue-bg">

    <div class="row">
        <a href="/"><img class= "logo logo-mobile" src="/images/allgo-nav.png"/></a>

        <div class="mobile-toggle">
            <span></span>
            <span></span>
            <span></span>
        </div>

        <nav>
            <ul>
              <li class="links-nav"><a href="http://descubre.allgo.mx">descubre.allgo</a></li>
              <li class="links-nav"><a href="http://allgo.mx/proximos-eventos/">Próximos eventos</a></li>
              <li class="descarga"><a class="descarga-borde" href="https://itunes.apple.com/mx/app/allgo/id910604225">Descarga</a></li>
            </ul>
        </nav>

    </div> <!-- / row -->
    </header>

    
    
    <!-- N A V B A R   B E G I N S
    <div class="blue-bg group">

      <nav class="navbar navbar-left">

        <ul>
          <li><a href="/"><img class= "logo" src="/images/allgo-nav.png"/></a></li>
        </ul>
      </nav>

      <nav class="navbar navbar-right">
        <ul class= "margin-right"> 
          <li class="links-nav"><a href="http://descubre.allgo.mx">descubre.allgo</a></li>
          <li class="links-nav"><a href="http://allgo.mx/proximos-eventos/">Próximos eventos</a></li>
          <li class="descarga"><a href="https://itunes.apple.com/mx/app/allgo/id910604225">Descarga</a></li> 
        </ul>

      </nav>

    </div>
    N A V B A R   E N D S -->

   
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/special-text-handler.js"></script>
    <script src="/bower_components/lodash/lodash.js"></script>
    <script src="/bower_components/jquery/dist/jquery.js"></script>
    <script src="/bower_components/masonry/dist/masonry.pkgd.js"></script>
    <script src="/js/dependencies/packery.pkgd.js"></script>
    <script src="/bower_components/imagesloaded/imagesloaded.js"></script>
    <script src="/bower_components/angular/angular.js"></script>
    <script src="/bower_components/angular-ui-router/release/angular-ui-router.js"></script>
    <script src="/bower_components/angular-masonry/angular-masonry.js"></script>
    <script src="/js/dependencies/intense.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/controllers.js"></script>
    <script src="/js/viewer.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
